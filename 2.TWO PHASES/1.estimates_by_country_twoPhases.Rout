
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R è un software libero ed è rilasciato SENZA ALCUNA GARANZIA.
Siamo ben lieti se potrai redistribuirlo, ma sotto certe condizioni.
Scrivi 'license()' o 'licence()' per maggiori dettagli.

R è un progetto collaborativo con molti contributi esterni.
Scrivi 'contributors()' per maggiori informazioni e 'citation()'
per sapere come citare R o i pacchetti nelle pubblicazioni.

Scrivi 'demo()' per una dimostrazione, 'help()' per la guida
oppure 'help.start()' per la guida nel browser HTML.
Scrivi 'q()' per uscire da R.

> ##############################################################
> # LUCAS - Calibration and estimation by country 2022
> ##############################################################
> start_time <- Sys.time()
> options(stringsAsFactors = TRUE)
Messaggio di avvertimento:
In options(stringsAsFactors = TRUE) :
  'options(stringsAsFactors = TRUE)' è deprecato e sarà disabilitato
> library(data.table)
> library(sf)
Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE
> library(ReGenesees)


--------------------------------------------------------
> The ReGenesees package has been successfully loaded. <
--------------------------------------------------------


Package: ReGenesees
Type: Package
Title: R Evolved Generalized Software for Sampling Estimates and Errors
        in Surveys
Description: Design-Based and Model-Assisted analysis of complex sample
        surveys. Multistage, stratified, clustered, unequally weighted
        survey designs. Calibration of survey weights. Horvitz-Thompson
        and Calibration Estimators. Variance Estimation for nonlinear
        smooth estimators by Taylor-series linearization. Estimates,
        standard errors, confidence intervals and design effects for:
        Totals, Means, absolute and relative Frequency Distributions
        (marginal, conditional, and joint), Ratios, Shares and Ratios
        of Shares, Multiple Regression Coefficients, and Quantiles.
        Automated Linearization of user-defined Complex Estimators.
        Design Covariance and Correlation. Estimates and sampling
        errors of user-defined complex Measures of Change derived from
        two not necessarily independent samples. Estimates and sampling
        errors for subpopulations. Consistent trimming of calibration
        weights. Calibration on complex population parameters, e.g.
        multiple regression coefficients. Generalized Variance
        Functions (GVF) method for predicting variance estimates.
        Sample size requirements and power calculations.
Version: 2.4
Author: Diego Zardetto [aut, cre]
Maintainer: Diego Zardetto <zardetto@istat.it>
Authors@R: person("Diego", "Zardetto", role = c("aut", "cre"), email =
        "zardetto@istat.it")
URL: https://diegozardetto.github.io/ReGenesees/,
        https://github.com/DiegoZardetto/ReGenesees/
BugReports: https://github.com/DiegoZardetto/ReGenesees/issues/
Copyright: Diego Zardetto and Thomas Lumley (for incorporating modified
        code derived from early versions of the survey package).
License: EUPL
Imports: stats, MASS
Depends: R (>= 3.5.0)
ByteCompile: TRUE
NeedsCompilation: no
Packaged: 2024-06-07 13:49:17 UTC; Giulio
Built: R 4.4.0; ; 2024-06-07 13:49:22 UTC; windows
RemoteType: github
RemoteHost: api.github.com
RemoteRepo: ReGenesees
RemoteUsername: DiegoZardetto
RemotePkgRef: DiegoZardetto/ReGenesees
RemoteRef: HEAD
RemoteSha: b1483af97a5aac09134c22d4238d12bd351f3a95
GithubRepo: ReGenesees
GithubUsername: DiegoZardetto
GithubRef: HEAD
GithubSHA1: b1483af97a5aac09134c22d4238d12bd351f3a95

> library(openxlsx)
> library(dplyr)

Caricamento pacchetto: 'dplyr'

I seguenti oggetti sono mascherati da 'package:data.table':

    between, first, last

I seguenti oggetti sono mascherati da 'package:stats':

    filter, lag

I seguenti oggetti sono mascherati da 'package:base':

    intersect, setdiff, setequal, union

> library(tidyr)
> 
> setwd("D:/Google Drive/LUCAS 2025/Task 1 - ESTIMATES/2.TWO PHASES")
> # setwd("C:\\Users\\UTENTE\\Google Drive\\LUCAS 2025\\Task 1 - ESTIMATES\\2.TWO PHASES")
> path_data <- "D:/Google Drive/LUCAS 2025/2.DATA/"
> # path_data <- "C:\\Users\\UTENTE\\Google Drive/LUCAS 2025/2.DATA/"
> #setwd("//pc.istat.it/xendesktop/DaaS/ilaria.bombelli/Desktop/GruppiDiLAvoro/Progetto_LUCAS/Task1/2.TWO PHASES")
> # setwd("C:/Users/UTENTE/Desktop/Progetto_LUCAS/Task1/2.TWO PHASES")
> # path_data="C:/Users/UTENTE/Desktop/Progetto_LUCAS/Task1/DATA/"
> 
> 
> # Prepare the path for the output
> dire <- getwd()
> direnew1 <- paste(dire, "/estimates2022", sep = "")
> # if (dir.exists(direnew1))
> #   unlink(direnew1,recursive=TRUE)
> if (!dir.exists(direnew1))
+   dir.create(direnew1)
> # 
> direnew2 <- paste(dire, "/weights2022", sep = "")
> # if (dir.exists(direnew2))
> #   unlink(direnew2,recursive=TRUE)
> if (!dir.exists(direnew2))
+   dir.create(direnew2)
> 
> direnew3 <- paste(dire, "/Samples", sep = "")
> # if (dir.exists(direnew1))
> #   unlink(direnew1,recursive=TRUE)
> if (!dir.exists(direnew3))
+   dir.create(direnew3)
> # 
> #------------------------------------------
> # Read survey 2022
> #------------------------------------------
> #s2022old <- fread(paste0(path_data,"survey_2022.txt"))
> s2022 <- read.csv(paste0(path_data,"LUCAS22_corrected_complete.csv"))
> #remove rows with NA in LC, LU
> s2022=s2022[!(is.na(s2022$SURVEY_LC1) | is.na(s2022$SURVEY_LU1)), ]
> # Fill the missing digits
> s2022$SURVEY_LC1 <- as.character(s2022$SURVEY_LC1)
> table(s2022$SURVEY_LC1)

    8     A    A1   A10   A11   A12   A13    A2   A21   A22    A3   A30     B 
    2    10    17     1  3969   262   308    26  4420  8957     3  1501   163 
  B11   B12   B13   B14   B15   B16   B17   B18   B19   B21   B22   B23   B31 
12812  1490  6171  1694  1890 10440   111  1675   369  1280  1161   397  2386 
  B32   B33   B34   B35   B36   B37   B41   B42   B43   B44   B45   B51   B52 
 4513   669   223   734    32   171   873   101   706   114    75   588  1720 
  B53   B54   B55   B71   B72   B73   B74   B75   B76   B77   B81   B82   B83 
 1206   584  4285  1304   231   398  1120   965   162    85  2750  1836   160 
  B84   Bx1   Bx2     C    C1   C10    C2   C20   C21   C22   C23    C3   C31 
  171 26091  1802   395   120 62326  2470     1  9699 13212  3130  2550  6327 
  C32   C33     D    D1   D10    D2   D20     E    E1   E10    E2   E20    E3 
 5256  4987    24    39 10745    43 19297    72    46 12024   125 77405    15 
  E30     F    F1   F10    F2   F20    F3   F30    F4   F40     G    G1   G10 
10683    11     6  3140     2   578     1  1200    19 13534     6    11     2 
  G11   G12    G2   G20   G21   G22   G30   G40   G50     H   H11   H12   H21 
12795   114     9     1  3733    26    48    59   170     7  3527  3875   375 
  H22   H23 
   91    76 
> s2022$SURVEY_LC1 <- ifelse(nchar(as.character(s2022$SURVEY_LC1)) == 2,
+                            paste0(s2022$SURVEY_LC1,"x"),s2022$SURVEY_LC1)
> s2022$SURVEY_LC1 <- ifelse(nchar(as.character(s2022$SURVEY_LC1)) == 1,
+                            paste0(s2022$SURVEY_LC1,"xx"),s2022$SURVEY_LC1)
> table(s2022$SURVEY_LC1)

  8xx   A10   A11   A12   A13   A1x   A21   A22   A2x   A30   A3x   Axx   B11 
    2     1  3969   262   308    17  4420  8957    26  1501     3    10 12812 
  B12   B13   B14   B15   B16   B17   B18   B19   B21   B22   B23   B31   B32 
 1490  6171  1694  1890 10440   111  1675   369  1280  1161   397  2386  4513 
  B33   B34   B35   B36   B37   B41   B42   B43   B44   B45   B51   B52   B53 
  669   223   734    32   171   873   101   706   114    75   588  1720  1206 
  B54   B55   B71   B72   B73   B74   B75   B76   B77   B81   B82   B83   B84 
  584  4285  1304   231   398  1120   965   162    85  2750  1836   160   171 
  Bx1   Bx2   Bxx   C10   C1x   C20   C21   C22   C23   C2x   C31   C32   C33 
26091  1802   163 62326   120     1  9699 13212  3130  2470  6327  5256  4987 
  C3x   Cxx   D10   D1x   D20   D2x   Dxx   E10   E1x   E20   E2x   E30   E3x 
 2550   395 10745    39 19297    43    24 12024    46 77405   125 10683    15 
  Exx   F10   F1x   F20   F2x   F30   F3x   F40   F4x   Fxx   G10   G11   G12 
   72  3140     6   578     2  1200     1 13534    19    11     2 12795   114 
  G1x   G20   G21   G22   G2x   G30   G40   G50   Gxx   H11   H12   H21   H22 
   11     1  3733    26     9    48    59   170     6  3527  3875   375    91 
  H23   Hxx 
   76     7 
> 
> ################################
> # some processing
> ################################
> s2022$area <- 1
> ################################
> s2022$SURVEY_LC1 <- factor(s2022$SURVEY_LC1)
> s2022$SURVEY_LU1 <- factor(s2022$SURVEY_LU1)
> s2022$STRATUM_LUCAS <- as.factor(s2022$STRATUM_LUCAS)
> s2022$ones <- 1
> s2022$SURVEY_LC1_1 <- as.factor(substr(as.character(s2022$SURVEY_LC1),1,1))
> table(s2022$SURVEY_LC1_1, useNA="ifany")

     8      A      B      C      D      E      F      G      H 
     2  19474  95708 110473  30148 100370  18491  16974   7951 
> s2022$SURVEY_LC1_2 <- as.factor(substr(as.character(s2022$SURVEY_LC1),1,2))
> table(s2022$SURVEY_LC1_2, useNA="ifany")

   8x    A1    A2    A3    Ax    B1    B2    B3    B4    B5    B7    B8    Bx 
    2  4557 13403  1504    10 36652  2838  8728  1869  8383  4265  4917 28056 
   C1    C2    C3    Cx    D1    D2    Dx    E1    E2    E3    Ex    F1    F2 
62446 28512 19120   395 10784 19340    24 12070 77530 10698    72  3146   580 
   F3    F4    Fx    G1    G2    G3    G4    G5    Gx    H1    H2    Hx 
 1201 13553    11 12922  3769    48    59   170     6  7402   542     7 
> s2022$SURVEY_LC1_3 <- as.factor(substr(as.character(s2022$SURVEY_LC1),1,3))
> table(s2022$SURVEY_LC1_3, useNA="ifany")

  8xx   A10   A11   A12   A13   A1x   A21   A22   A2x   A30   A3x   Axx   B11 
    2     1  3969   262   308    17  4420  8957    26  1501     3    10 12812 
  B12   B13   B14   B15   B16   B17   B18   B19   B21   B22   B23   B31   B32 
 1490  6171  1694  1890 10440   111  1675   369  1280  1161   397  2386  4513 
  B33   B34   B35   B36   B37   B41   B42   B43   B44   B45   B51   B52   B53 
  669   223   734    32   171   873   101   706   114    75   588  1720  1206 
  B54   B55   B71   B72   B73   B74   B75   B76   B77   B81   B82   B83   B84 
  584  4285  1304   231   398  1120   965   162    85  2750  1836   160   171 
  Bx1   Bx2   Bxx   C10   C1x   C20   C21   C22   C23   C2x   C31   C32   C33 
26091  1802   163 62326   120     1  9699 13212  3130  2470  6327  5256  4987 
  C3x   Cxx   D10   D1x   D20   D2x   Dxx   E10   E1x   E20   E2x   E30   E3x 
 2550   395 10745    39 19297    43    24 12024    46 77405   125 10683    15 
  Exx   F10   F1x   F20   F2x   F30   F3x   F40   F4x   Fxx   G10   G11   G12 
   72  3140     6   578     2  1200     1 13534    19    11     2 12795   114 
  G1x   G20   G21   G22   G2x   G30   G40   G50   Gxx   H11   H12   H21   H22 
   11     1  3733    26     9    48    59   170     6  3527  3875   375    91 
  H23   Hxx 
   76     7 
> s2022$SURVEY_LU1_1 <- as.factor(substr(as.character(s2022$SURVEY_LU1),1,2))
> table(s2022$SURVEY_LU1_1, useNA="ifany")

     8     U1     U2     U3     U4 
     8 274605   1740  45927  77311 
> s2022$SURVEY_LU1_2 <- as.factor(substr(as.character(s2022$SURVEY_LU1),1,3))
> table(s2022$SURVEY_LU1_2, useNA="ifany")

     8    U11    U12    U13    U14    U15    U21    U22    U31    U32    U33 
     8 186660  84568   1501   1783     93    898    842  16000    757    583 
   U34    U35    U36    U37    U41    U42 
  1226   2954  10145  14262   3754  73557 
> s2022$SURVEY_LU1_3 <- as.factor(substr(as.character(s2022$SURVEY_LU1),1,4))
> table(s2022$SURVEY_LU1_3, useNA="ifany")

     8   U111   U112   U113   U120   U130   U140   U150   U210   U221   U222 
     8 179335   5197   2128  84568   1501   1783     93    898    113     23 
  U223   U224   U225   U226   U227   U228   U311   U312   U313   U314   U315 
   139    108    116    199    135      9    650  10635   2204    351     12 
  U316   U317   U318   U319   U321   U322   U330   U341   U342   U350   U361 
    24    749    298   1077    498    259    583   1147     79   2954   8813 
  U362   U370   U411   U412   U413   U414   U415   U420 
  1332  14262    251     44     68    368   3023  73557 
> ###########################################################
> s2022$fao_class_name <- as.factor(s2022$fao_class_name)
> s2022$settlement <- as.factor(s2022$settlement)
> s2022$lue <- as.factor(s2022$lue)
> s2022$lud <- as.factor(s2022$lud)
> ###########################################################
> # Eliminate incomplete LC and LU
> # a <- s2022[nchar(as.character(s2022$SURVEY_LC1_2)) < 2,]
> # # 688
> # b <- s2022[nchar(as.character(s2022$SURVEY_LC1_3)) < 3,]
> # # 6190
> # c <- s2022[nchar(as.character(s2022$SURVEY_LU1_2)) < 3,]
> # d <- s2022[nchar(as.character(s2022$SURVEY_LU1_3)) < 4,]
> # s2022 <- s2022[!(nchar(as.character(s2022$SURVEY_LC1_2)) < 2) &
> #                  !(nchar(as.character(s2022$SURVEY_LC1_3)) < 3),]
> ###########################################################
> # Calculate fpc
> ###########################################################
> # num<-aggregate(s2022$ones,by=list(s2022$STRATUM_LUCAS),FUN=sum)
> # num$n=num$x
> # num$x<-NULL
> # den<-aggregate(s2022$WGT_LUCAS,by=list(s2022$STRATUM_LUCAS),FUN=sum)
> # den$N=den$x
> # den$x<-NULL
> # fpc<-merge(num,den,by="Group.1")
> # fpc$STRATUM_LUCAS<-fpc$Group.1
> # fpc$fpc=fpc$n/fpc$N
> # s2022<-merge(s2022,fpc[,c("STRATUM_LUCAS","fpc")],by="STRATUM_LUCAS")
> 
> ################################################################
> # Read areas
> areas <- read.csv(paste0(path_data,"areas_2015_2024.csv"),colClasses = c(rep('character',4), rep('numeric',10)))
> ################################################################
> 
> 
> #########################################
> # MASTER
> #########################################
> # load(paste0(path_data,"Master_con_hrl_e_NUTS24.RData"))
> # master<-Master_con_hrl_e_NUTS24
> # rm(Master_con_hrl_e_NUTS24)
> load(paste0(path_data,"master_complete.RData"))
> table(master$NUTS0_24,useNA="ifany")

    AT     BE     BG     CY     CZ     DE     DK     EE     EL     ES     FI 
 20982   7674  27729   1373  19716  89409  10776  11325  32848 124553  84330 
    FR     HR     HU     IE     IT     LT     LU     LV     MT     NL     PL 
137039  14135  23268  17435  75036  16234    644  16136     80   8929  77964 
    PT     RO     SE     SI     SK 
 22142  59561 112385   5062  12265 
> c <- master[master$NUTS0_24=="",]
> table(c$NUTS0_16,useNA="ifany")

   AL AT BE BG CH CY CZ DE DK EE EL ES FI FR HR HU IE IT LT LU LV MT NL PL PT 
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 
RO RS SE SI SK TR UK 
 0  0  0  0  0  0  0 
> ################################
> # geovisualize master points
> ################################
> # library(sf)
> # library(mapview)
> # c2 <- st_as_sf(c,coords=c("Y_LAEA","X_LAEA"))
> # st_crs(c2) <- "Coordinate Reference System:
> #   User input: +proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs 
> #   wkt:
> # PROJCRS['unknown',
> #     BASEGEOGCRS['unknown',
> #         DATUM['Unknown based on GRS 1980 ellipsoid',
> #             ELLIPSOID['GRS 1980',6378137,298.257222101,
> #                 LENGTHUNIT['metre',1],
> #                 ID['EPSG',7019]]],
> #         PRIMEM['Greenwich',0,
> #             ANGLEUNIT['degree',0.0174532925199433],
> #             ID['EPSG',8901]]],
> #     CONVERSION['unknown',
> # METHOD['Lambert Azimuthal Equal Area',
> #        ID['EPSG',9820]],
> # PARAMETER['Latitude of natural origin',52,
> #           ANGLEUNIT['degree',0.0174532925199433],
> #           ID['EPSG',8801]],
> # PARAMETER['Longitude of natural origin',10,
> #           ANGLEUNIT['degree',0.0174532925199433],
> #           ID['EPSG',8802]],
> # PARAMETER['False easting',4321000,
> #           LENGTHUNIT['metre',1],
> #           ID['EPSG',8806]],
> # PARAMETER['False northing',321000,
> #             ID['EPSG',8807]]],
> #     CS[Cartesian,2],
> #         AXIS['(E)',east,
> #             ORDER[1],
> #             LENGTHUNIT['metre',1,
> #                 ID['EPSG',9001]]],
> #         AXIS['(N)',north,
> #             ORDER[2],
> #             LENGTHUNIT['metre',1,
> #                 ID['EPSG',9001]]]]"
> # library(mapview)
> # mapview(c2, map.types = c("OpenStreetMap"))
> 
> ###########################################################################
> # Assign the new NUTS24 to the sample
> # s2022 <- merge(s2022,master[,c("POINT_ID","NUTS0_24","NUTS1_24","NUTS2_24","NUTS3_24")],by="POINT_ID",all.x=TRUE)
> s2022$NUTS0_24 <- as.factor(s2022$NUTS0_24)
> s2022$NUTS1_24 <- as.factor(s2022$NUTS1_24)
> s2022$NUTS2_24 <- as.factor(s2022$NUTS2_24)
> s2022$NUTS3_24 <- as.factor(s2022$NUTS3_24)
> a <- s2022[is.na(s2022$NUTS2_24),]
> #b <- master[is.na(master$NUTS2_24),]
> 
> ###########################################################################
> # Read population
> # pop <- read.csv(paste0(path_data,"EU_population_2009_2023.csv"))
> # colnames(pop) <- c("NUTS","Pop2009","Pop2012","Pop2015","Pop2018","Pop2023")
> # s2022 <- merge(s2022,pop[,c("NUTS","Pop2023")],by.x="NUTS0_24",by.y="NUTS")
> 
> 
> ###########################################################
> # settl_pc
> ###########################################################################
> table(as.numeric(s2022$settlement))

     1      2 
360935  38656 
> s2022$settl_pc <- (as.numeric(s2022$settlement)-1) * 1000 / s2022$Pop2023
> summary(s2022$settl_pc)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.000e+00 0.000e+00 0.000e+00 7.632e-06 0.000e+00 1.845e-03 
> 
> ###########################################################################
> # exclusion of master points without points in the sample
> ###########################################################################
> master<-master[master$NUTS0_24 %in% unique(s2022$NUTS0_24),]
> 
> 
> ###########################################################################
> # exclusion of some NUTS2  --> ask for confirm!
> ###########################################################################
> # excl_nuts2 <- c("ES63","ES64","ES70","FR9","PT20","PT30") 
> # master <- master[!(master$NUTS2_24 %in% excl_nuts2),]
> 
> ###########################################################################
> # Eliminate Master points with NA in point_area
> ###########################################################################
> summary(master$point_area)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  3.767   3.994   4.001   4.001   4.005   4.691 
> a <- master[is.na(master$point_area),]
> master <- master[!is.na(master$point_area),]
> 
> 
> ###########################################################################
> # master processing
> ###########################################################################
> master$ELEV2 <- ifelse(master$ELEV_DEM < 100, 1, 
+                        ifelse(master$ELEV_DEM < 200, 2,
+                               ifelse(master$ELEV < 500, 3,
+                                      ifelse(master$ELEV_DEM < 1000, 4,
+                                             ifelse(master$ELEV_DEM < 1500, 5, 6)))))
> master$ELEV2 <- as.factor(master$ELEV2)
> 
> master$CLC18_1d<-factor(substr(master$CLC18_vett,1,1))
> master$NUTS0_24 <- factor(master$NUTS0_24)
> master$NUTS1_24 <- factor(master$NUTS1_24)
> master$NUTS2_24 <- factor(master$NUTS2_24)
> master$NUTS3_24 <- factor(master$NUTS3_24)
> master$BCK18_R <- factor(master$BCK18_R)
> master$BCK21_R <- factor(master$BCK21_R)
> master$CLC18_vett<-factor(master$CLC18_vett)
> master$imperviousness <- master$IMD18_10 /100
> master$art_imp <- master$imperviousness * master$point_area
> master$ones<-1
> 
> 
> ##########
> # LOOP
> ##########
> 
> paesi <- levels(as.factor(s2022$NUTS0_24))
> i = which(paesi=="CY")
> i
[1] 4
> sintesi=s2022 %>% group_by(NUTS0_24) %>% summarise(nlevel_nuts1=length(unique(NUTS1_24)), nlevel_nuts2=length(unique(NUTS2_24)))
> 
> for (i in c(1:length(paesi))) {
+   country <- paesi[i]
+   cat("\n Country: ",country,"\n")
+   # seleziono dal master le variabili che possono essere utili
+   m <- master[master$NUTS0_24 == country,c("POINT_ID","point_area","ones","NUTS0_24","NUTS1_24","NUTS2_24","NUTS3_24",
+                                            "ELEV2","N2K_SITETYPE",
+                                            "IMP18_10_cl", "IBU18_10","GRA18_10","FTY18_10",
+                                            "CLC18_1d","BCK18_R","BCK21_R")]
+   ##########################################
+   m <- m[!is.na(m$NUTS2_24),]
+   # m$geometry<-NULL
+   # eliminate empty levels in factor variables in m 
+   m<-droplevels(m)
+   # select country sample with variables of interest
+   s <- merge(s2022[,c("POINT_ID","fpc","Pop2023","SURVEY_OBS_TYPE",
+                       "SURVEY_LC1","SURVEY_LU1","SURVEY_LC1_1","SURVEY_LU1_1",
+                       "SURVEY_LC1_2","SURVEY_LU1_2","SURVEY_LC1_3","SURVEY_LU1_3",
+                       "WGT_LUCAS", "STRATUM_LUCAS","settlement","fao_class_name",
+                       "lud","lue","settl_pc","area")], 
+              m,
+              by=c("POINT_ID"))  
+   s <- s[!is.na(s$WGT_LUCAS),]
+   s<-droplevels(s)
+   # align levels of factor variables in s and m
+   levels(s$ELEV2)    <- levels(m$ELEV2)
+   levels(s$NUTS2_24) <- levels(m$NUTS2_24)
+   levels(s$BCK21_R)  <- levels(m$BCK21_R)
+   levels(s$BCK18_R)  <- levels(m$BCK18_R)
+   levels(s$GRA18_10) <- levels(m$GRA18_10)
+   levels(s$FTY18_10) <- levels(m$FTY18_10R)
+   levels(s$CLC18_1d) <- levels(m$CLC18_1d)
+   ###############   
+   # CALIBRATION
+   ###############
+   s <- s[order(s$STRATUM_LUCAS),]
+   print(paste("nlevels NUTS2=",length(levels(s$NUTS2_24))))
+   print(paste("nlevels NUTS1=",length(levels(s$NUTS1_24))))
+   if (length(levels(s$NUTS2_24)) > 1) {
+     # design
+     des <- e.svydesign(data=s, 
+                        ids= ~ POINT_ID, 
+                        strata= ~ STRATUM_LUCAS, 
+                        weights = ~ WGT_LUCAS, 
+                        self.rep.str= NULL, 
+                        fpc= ~fpc, 
+                        check.data= TRUE)
+     ls <- find.lon.strata(des)
+     #if (!is.null(ls)) des <- collapse.strata(des, block.vars=~NUTS2_24)
+     #if (!is.null(ls)) des <- collapse.strata(des)
+     if (!is.null(ls)) {
+       des <-tryCatch({
+         des <- collapse.strata(des, block.vars = ~NUTS2_24)
+       },
+       error = function(e) {
+         cat("Error:", e$message, "\n")
+         des <- collapse.strata(des)
+         return(des)
+       })
+     }
+     
+     levels(des$variables$BCK21_R)<-levels(m$BCK21_R)
+     levels(des$variables$GRA18_10)<-levels(m$GRA18_10)
+     levels(des$variables$FTY18_10)<-levels(m$FTY18_10)
+     
+     
+     # known totals
+     poptemp <- pop.template(data=des,
+                             calmodel=   ~
+                               point_area:NUTS2_24 +
+                               point_area:(
+                                 ELEV2 +
+                                   BCK21_R +
+                                   GRA18_10 +
+                                   FTY18_10) - 1,
+     )
+     
+     # fill template with the master
+     popfill <- fill.template(universe=m, template= poptemp)
+     ######################################################
+     # and adjust with areas:
+     #area_totals <- areas$area2024[substr(areas$NUTS2,1,2)==country]
+     #area_totals <- area_totals[!is.na(area_totals)]
+     #popfill[substr(colnames(popfill),1,15)=="point_area:NUTS"] <- area_totals
+     #sum(popfill[substr(colnames(popfill),1,15)=="point_area:NUTS"])
+     ######################################################
+     # calibration
+     cal <- e.calibrate(design=des,
+                        df.population= popfill,
+                        calmodel=   ~
+                          point_area:NUTS2_24 +
+                          point_area:(
+                            ELEV2 +
+                              BCK21_R +
+                              GRA18_10 +
+                              FTY18_10) - 1,
+                        calfun= "linear",
+                        bounds =   c(0.01,50)
+     )
+     
+   }
+   
+   if (length(levels(s$NUTS2_24)) == 1) { 
+     # design
+     des <- e.svydesign(data=s, 
+                        ids= ~ POINT_ID, 
+                        strata= ~ STRATUM_LUCAS, 
+                        weights = ~ WGT_LUCAS, 
+                        self.rep.str= NULL, 
+                        fpc= ~fpc, 
+                        check.data= TRUE)
+     ls <- find.lon.strata(des)
+     #if (!is.null(ls)) des <- collapse.strata(des, block.vars=~NUTS2_24)
+     #if (!is.null(ls)) des <- collapse.strata(des)
+     if (!is.null(ls)) {
+       des <- tryCatch({
+         des <- collapse.strata(des, block.vars = ~NUTS2_24)
+       },
+       error = function(e) {
+         cat("Error:", e$message, "\n")
+         des <- collapse.strata(des)
+         return(des)
+       })
+     }
+     levels(des$variables$BCK21_R)<-levels(m$BCK21_R)
+     levels(des$variables$GRA18_10)<-levels(m$GRA18_10)
+     levels(des$variables$FTY18_10)<-levels(m$FTY18_10)
+     # known totals for all countries except EE, LU, LV
+     if (!i %in% c(4,8,18,19)) {
+       poptemp <- pop.template(data=des,
+                               calmodel=   ~ 
+                                 point_area +
+                                 point_area:(
+                                   ELEV2+
+                                     BCK21_R+
+                                     GRA18_10+
+                                     FTY18_10) - 1)
+       # fill with master
+       
+       
+       popfill <- fill.template(universe=m, template= poptemp)
+       #popfill[1] <- sum(areas$area2024[substr(areas$NUTS2,1,2)==country],na.rm=TRUE)
+       
+       
+       # calibration
+       cal <- e.calibrate(design=des, 
+                          df.population= popfill, 
+                          calmodel=   ~ 
+                            point_area +
+                            point_area:(
+                              ELEV2+
+                                BCK21_R+
+                                GRA18_10+
+                                FTY18_10) - 1,
+                          calfun= "linear",
+                          bounds =   c(0.01,50)
+       )
+     }
+     # known totals for EE, LU, LV
+     if (i %in% c(8,18,19)) {
+       poptemp <- pop.template(data=des,
+                               calmodel=   ~ 
+                                 point_area - 1)
+       # fill with the master
+       popfill <- fill.template(universe=m, template= poptemp)
+       popfill[1] <- sum(areas$area2024[substr(areas$NUTS2,1,2)==country],na.rm=TRUE)
+       # calibration
+       cal <- e.calibrate(design=des, 
+                          df.population= popfill, 
+                          calmodel=   ~ 
+                            point_area - 1,
+                          calfun= "linear",
+                          bounds =   c(0.01,50)
+       )
+     }
+     # known totals for CY
+     if (i == 4) {
+       poptemp <- pop.template(data=des,
+                               calmodel=   ~ 
+                                 point_area +
+                                 point_area:(
+                                   GRA18_10+
+                                     FTY18_10) - 1,)
+       # fill with the master
+       popfill <- fill.template(universe=m, template= poptemp)
+       #popfill[1] <- sum(areas$area2024[substr(areas$NUTS2,1,2)==country],na.rm=TRUE)
+       # calibration
+       cal <- e.calibrate(design=des, 
+                          df.population= popfill, 
+                          calmodel=   ~ 
+                            point_area +
+                            point_area:(
+                              GRA18_10+
+                                FTY18_10) - 1,
+                          calfun= "linear",
+                          bounds =   c(0.01,50)
+       )
+     }
+   }
+   check.cal(cal)
+   #UWE(cal)
+   summary(s$WGT_LUCAS)
+   sum(s$WGT_LUCAS)
+   sum(m$ones)
+   sum(m$point_area)
+   cal$prob <- cal$prob/cal$variables$point_area
+   sum(weights(cal))
+   summary(weights(cal))
+   s$cal_wgt <- weights(cal)
+   
+   ##########################   
+   # write calibrated weights
+   ##########################
+   df <- NULL
+   df$POINT_ID <- cal$variables$POINT_ID
+   df$cal_wgt <- weights(cal)
+   df <- as.data.frame(df)
+   filename <- paste(country,"_calibrated_wgts_2022.txt",sep="")
+   write.table(df,file = file.path(direnew2, filename),sep="\t",quote=FALSE,row.names=FALSE,dec=".")
+   # filename<- paste(country,"_des.Rdata",sep="")
+   # save(des,file=file.path(direnew3, filename))
+   # filename<- paste(country,"_cal.Rdata",sep="")
+   # save(cal,file=file.path(direnew3, filename))
+   ##########################   
+   # ESTIMATION
+   ##########################   
+   est_LC1_LU1 <- svystatTM(cal, ~ area +
+                              SURVEY_LC1_1+
+                              SURVEY_LU1_1+
+                              # SURVEY_LC1_2+
+                              # SURVEY_LU1_2+
+                              # SURVEY_LC1_3+
+                              # SURVEY_LU1_3+
+                              settlement+
+                              settl_pc+
+                              fao_class_name+
+                              lue+
+                              lud,
+                            estimator="Total",
+                            vartype=c("se","cv"),
+                            conf.int= TRUE, 
+                            conf.lev= 0.95)
+   est_LC1_LU1_NUTS1_24 <- svystatTM(cal, ~ area +
+                                       SURVEY_LC1_1+
+                                       SURVEY_LU1_1+
+                                       # SURVEY_LC1_2+
+                                       # SURVEY_LU1_2+
+                                       # SURVEY_LC1_3+
+                                       # SURVEY_LU1_3+
+                                       settlement+
+                                       fao_class_name+
+                                       lue+
+                                       lud,
+                                     by = ~ NUTS1_24,
+                                     estimator="Total",
+                                     vartype=c("se","cv"),
+                                     conf.int= TRUE,
+                                     conf.lev= 0.95)
+   
+   if (length(levels(s$NUTS1_24)) > 1){
+     est_LC1_LU1_NUTS1_24_t <- as.data.frame(t(est_LC1_LU1_NUTS1_24[,-1]))
+     est_LC1_LU1_NUTS1_24_t$variable <- row.names(est_LC1_LU1_NUTS1_24_t)
+     #est_LC1_LU1_NUTS1_24_t$variable[1] <- "variable"
+   }
+   
+   est_LC1_LU1_NUTS2_24 <- svystatTM(cal, ~ area +
+                                       SURVEY_LC1_1+
+                                       SURVEY_LU1_1+
+                                       # SURVEY_LC1_2+
+                                       # SURVEY_LU1_2+
+                                       # SURVEY_LC1_3+
+                                       # SURVEY_LU1_3+
+                                       settlement+
+                                       fao_class_name+
+                                       lue+
+                                       lud,
+                                     by = ~ NUTS2_24,
+                                     estimator="Total",
+                                     vartype=c("se","cv"),
+                                     conf.int= TRUE, 
+                                     conf.lev= 0.95)
+   if (length(levels(s$NUTS2_24)) > 1){
+     est_LC1_LU1_NUTS2_24_t <- as.data.frame(t(est_LC1_LU1_NUTS2_24[,-1]))
+     est_LC1_LU1_NUTS2_24_t$variable <- row.names(est_LC1_LU1_NUTS2_24_t)
+     #est_LC1_LU1_NUTS2_24_t$variable[1] <- "variable"
+   }
+   
+   #---------------------------------------------------------------
+   # 2nd PHASE
+   #---------------------------------------------------------------
+   source("Script/1.estimates_by_country_twoPhases_secondPhase_simplified.R")
+   
+   #---------------------------------------------------------------
+   # Join outputs and write them
+   #---------------------------------------------------------------
+   filename <- paste(country,'_est_LC1_LU1_2022.csv',sep="")
+   tot1 <- rbind(est_LC1_LU1,est_LC1_LU1_2nd) #ok
+   write.svystat(tot1,file = file.path(direnew1, filename),sep=",",dec=".")
+   
+   # Transposed ----------------------------------------------
+   filename <- paste(country,"_est_LC1_LU1_NUTS1_24_2022_t.csv",sep="")
+   if (length(levels(s$NUTS1_24)) == 1){
+     tot2 = merge(est_LC1_LU1_NUTS1_24,est_LC1_LU1_NUTS1_24_2nd, by="NUTS1_24")
+     name=as.character(tot2$NUTS1_24)
+     tot2 = tot2 %>% pivot_longer(-NUTS1_24, names_to="variable", values_to = name) %>% select(all_of(name),variable)
+     }
+   else{
+     tot2 <- rbind(est_LC1_LU1_NUTS1_24_t,est_LC1_LU1_NUTS1_24_2nd_t)
+     
+     #ok for countries with more than one nuts1
+   }
+   
+   write.table(tot2,file = file.path(direnew1, filename),sep=",",dec=".",
+               row.names=FALSE,col.names=TRUE,quote=FALSE)
+   #-----------------------------------------------------------
+   filename <- paste(country,"_est_LC1_LU1_NUTS2_24_2022_t.csv",sep="")
+   if (length(levels(s$NUTS2_24)) == 1){
+     tot3 = merge(est_LC1_LU1_NUTS2_24,est_LC1_LU1_NUTS2_24_2nd, by="NUTS2_24")
+     name=as.character(tot3$NUTS2_24)
+     tot3 = tot3 %>% pivot_longer(-NUTS2_24, names_to="variable", values_to = name) %>% select(all_of(name),variable)
+   }
+   else{
+     tot3 <- rbind(est_LC1_LU1_NUTS2_24_t,est_LC1_LU1_NUTS2_24_2nd_t) # ok for countries with more than one nuts2
+   }
+   write.table(tot3,file = file.path(direnew1, filename),sep=",",dec=".",
+               row.names=FALSE,col.names=TRUE,quote=FALSE)
+   
+ }

 Country:  AT 
[1] "nlevels NUTS2= 9"
[1] "nlevels NUTS1= 3"
# No lonely PSUs found!


# Coherence check between 'universe' and 'template': OK

All Calibration Constraints (23) fulfilled (at tolerance level epsilon = 1e-07).

Errore in file(filename, "r", encoding = encoding) : 
  non è possibile aprire la connessione
Chiamate: source -> file
In aggiunta: Messaggio di avvertimento:
In file(filename, "r", encoding = encoding) :
  non è possibile aprire il file 'Script/1.estimates_by_country_twoPhases_secondPhase_simplified.R': No such file or directory
Esecuzione interrotta
